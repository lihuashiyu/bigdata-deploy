vm.max_map_count             = 2097152                     # 限制一个进程可以拥有的 VMA(虚拟内存区域)的数量
vm.overcommit_memory         = 1                           # 内存分配策略：0：内核将检查是否有足够的可用内存供应用进程使用；如果有，申请允许；否则，申请失败，并把错误返回给应用进程；1：内核允许分配所有的物理内存，而不管当前的内存状态如何；2：内核允许分配超过所有物理内存和交换空间总和的内存
vm.swappiness                = 40                          # 内存剩余 40% 的时候，开始使用虚拟内存
vm.vfs_cache_pressure        = 50                          # 调整缓存压力

kernel.shmmni                = 4096                        # 系统范围内共享内存段的最大数量（默认 4096）
kernel.shmmax                = 18446744073692774399        # 共享内存段的最大尺寸（以字节为单位，默认 32M）
kernel.shmall                = 18446744073692774399        # 系统一次可以使用的共享内存总量（以页为单位，默认 2097152）
kernel.sem                   = 32000 1024000000 500 32000  # 每个信号集的最大信号数量、系统中信号（而不是信号集）的最大数、每个 semop 系统调用可以执行的信号操作的数量、信号集的最大数量

fs.aio-max-nr                = 1048576                     # 所允许的并发请求的最大个数（64KB，用来对异步 I/O 的性能进行优化)
fs.file-max                  = 9223372036854775807         # 整个系统可以打开的最大文件数的限制
fs.nr_open                   = 1073741816                  # 单个进程可分配的最大文件数

net.core.rmem_default        = 26214400                    # TCP 数据接收缓冲默认大小
net.core.rmem_max            = 104857600                   # 最大的 TCP 数据接收缓冲
net.core.wmem_default        = 26214400                    # TCP 数据发送缓冲默认大小
net.core.wmem_max            = 104857600                   # 最大的 TCP 数据发送缓冲
net.core.netdev_max_backlog  = 262144                      # 网络设备接收数据包的速率比内核处理这些包的速率快时，允许送到队列的数据包的最大数目
net.core.optmem_max          = 8192000                     # 每个套接字所允许的最大缓冲区的大小
net.core.somaxconn           = 65535                       # socket 监听的 backlog(监听队列)上限
net.core.default_qdisc       = fq                          # 网络设备的默认排队规则：公平排队

net.ipv4.tcp_rmem            = 4096 26214400 104857600     # TCP 接收缓冲区的最小值、默认初始值、最大值
net.ipv4.tcp_wmem            = 4096 26214400 104857600     # TCP 发送缓冲区的最小值、默认初始值、最大值
net.ipv4.tcp_keepalive_time  = 120                         # TCP 发送 keepalive 消息的频度
net.ipv4.tcp_keepalive_probes = 3                          # 如果对方不予应答，探测包的发送次数
net.ipv4.tcp_keepalive_intvl = 15                          # keepalive 探测包的发送间隔
net.ipv4.tcp_fin_timeout     = 10                          # 表示如果套接字由本端要求关闭，这个参数决定了它保持在 FIN-WAIT-2 状态的时间
net.ipv4.tcp_max_tw_buckets  = 8192                        # 同时保持 TIME_WAIT 套接字的最大数量
net.ipv4.tcp_timestamps      = 1                           # 开启 TCP 时间戳
net.ipv4.tcp_syncookies      = 1                           # 开启 SYN Cookies：当出现 SYN 等待队列溢出时，启用 cookies 来处理，可防范少量 SYN 攻击
net.ipv4.tcp_max_orphans     = 8192                        # 最大孤儿连接的数量，超过时连接就会直接释放
net.ipv4.tcp_sack            = 1                           # 启用 sack，减少段丢失时需要重传的段数目
net.ipv4.tcp_dsack           = 1                           # 检测不必要的重传
net.ipv4.tcp_no_metrics_save = 1                           # 新建立相同连接时，使用保存的参数来初始化连接
net.ipv4.tcp_max_syn_backlog = 262144                      # SYN 队列长度，越大，容纳的等待连接的网络连接数越多
net.ipv4.tcp_synack_retries  = 3                           # 控制 sync + ack 包的重传次数
net.ipv4.tcp_syn_retries     = 2                           # 在内核放弃建立连接之前发送 SYN 包的数量
net.ipv4.tcp_window_scaling  = 0                           # 关闭 tcp_window_scaling
net.ipv4.tcp_notsent_lowat   = 16384                       # 控制发送缓冲区中，未发送数据的低水位线
net.ipv4.tcp_adv_win_scale   = 1                           # 启用高级窗口缩放，允许 TCP 使用更大的窗口大小，提高吞吐量
net.ipv4.tcp_low_latency     = 1                           # 开启低延迟模式，在高吞吐量情况下，建议此选项禁用
net.ipv4.tcp_mtu_probing     = 1                           # 自动 MTU，动态调整数据包大小
net.ipv4.tcp_autocorking     = 0                           # 关闭 TCP 自动阻塞控制
net.ipv4.tcp_congestion_control    = bbr                   # 用于新连接的拥塞控制算法：bbr
net.ipv4.tcp_slow_start_after_idle = 0                     # 禁用慢启动后空闲，加快空闲后重新传输的速度
net.ipv4_fastopen            = 3                           # 在 TCP 第一次握手时就传输数据
net.ipv4.route.gc_timeout    = 100                         # 路由缓存刷新频率，当一个路由失败后多长时间跳到另一个路由
net.ipv4.ip_local_port_range = 4096 65535                  # 表示向外连接的 IPv4 端口范围
