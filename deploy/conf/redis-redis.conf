# Redis configuration file example.
#
# Note that in order to read the configuration file, Redis must be
# started with the file path as first argument:
#
# ./redis-server ../conf/redis-redis.conf

# 1k => 1000 bytes
# 1kb => 1024 bytes
# 1m => 1000000 bytes
# 1mb => 1024*1024 bytes
# 1g => 1000000000 bytes
# 1gb => 1024*1024*1024 bytes
#
# units are case insensitive so 1GB 1Gb 1gB are all the same.


################################## INCLUDES ###################################

# Include one or more other config files here.  This is useful if you
# have a standard template that goes to all Redis servers but also need
# to customize a few per-server settings.  Include files can include
# other files, so use this wisely.
#
# Notice option "include" won't be rewritten by command "CONFIG REWRITE"
# from admin or Redis Sentinel. Since Redis always uses the last processed
# line as value of a configuration directive, you'd better put includes
# at the beginning of this file to avoid overwriting config change at runtime.
#
# If instead you are interested in using includes to override configuration
# options, it is better to use include as the last line.
#
# include /path/to/local.conf
# include /path/to/other.conf

################################## MODULES #####################################

# Load modules at startup. If the server is not able to load modules
# it will abort. It is possible to use multiple loadmodule directives.
#
# loadmodule /path/to/my_module.so
# loadmodule /path/to/other_module.so

################################## NETWORK #####################################

# 添加监听的主机地址：指定 redis 只接收来自于该IP地址的请求，如果不进行设置，那么将处理所有请求
bind 0.0.0.0

# 是否开启保护模式，默认开启：要是配置里没有指定 bind 和密码，开启该参数后，redis只会本地进行访问，拒绝外部访问；要是开启了密码和 bind，可以开启，否则最好关闭，设置为 no
protected-mode no

# redis 监听的端口号
port 6379

# 此参数确定了 TCP 连接中已完成队列(完成三次握手之后)的长度， 必须不大于 Linux 系统定义的 /proc/sys/net/core/somaxconn（默认 511），
# Linux 默认 128，对于负载很大的服务程序来说一般会将它修改为 2048 或者更大（/etc/sysctl.conf 添加：net.core.somaxconn = 2048，sysctl -p）
tcp-backlog 511

# Unix socket.
#
# Specify the path for the Unix socket that will be used to listen for
# incoming connections. There is no default, so Redis will not listen
# on a unix socket when not specified.
#
# unixsocket /tmp/redis.sock
# unixsocketperm 700

# Close the connection after a client is idle for N seconds (0 to disable)
timeout 0

# TCP keepalive.
#
# If non-zero, use SO_KEEPALIVE to send TCP ACKs to clients in absence
# of communication. This is useful for two reasons:
#
# 1) Detect dead peers.
# 2) Take the connection alive from the point of view of network
#    equipment in the middle.
#
# On Linux, the specified value (in seconds) is the period used to send ACKs.
# Note that to close the connection the double of the time is needed.
# On other kernels the period depends on the kernel configuration.
#
# A reasonable value for this option is 300 seconds, which is the new
# Redis default starting with Redis 3.2.1.
tcp-keepalive 300

################################# GENERAL #####################################

# 是否在后台执行，yes：后台运行；no：不是后台运行
daemonize yes

# If you run Redis from upstart or systemd, Redis can interact with your
# supervision tree. Options:
#   supervised no      - no supervision interaction
#   supervised upstart - signal upstart by putting Redis into SIGSTOP mode
#   supervised systemd - signal systemd by writing READY=1 to $NOTIFY_SOCKET
#   supervised auto    - detect upstart or systemd method based on
#                        UPSTART_JOB or NOTIFY_SOCKET environment variables
# Note: these supervision methods only signal "process is ready."
#       They do not enable continuous liveness pings back to your supervisor.
supervised no

# redis 的进程 pid 文件
pidfile ${REDIS_HOME}/data/redis_6379.pid
 
# 指定了服务端日志的级别：级别包括：debug（很多信息，方便开发、测试），verbose（许多有用的信息），
#     notice（适当的日志级别，适合生产环境），warn（只有非常重要的信息）
loglevel notice

# 指定记录日志的文件，空字符串的话，日志会打印到标准输出设备，后台运行的 redis 标准输出是 /dev/null
logfile ${REDIS_HOME}/logs/redis.log


# 是否打开记录系统日志，只有 syslog-enabled 是 yes 并且
# syslog-enabled no

# syslog 的标识符
# syslog-ident redis

# 日志的来源、设备
# syslog-facility local0

# 数据库的数量，默认使用的数据库是 0：可以通过 "SELECT 【数据库序号】" 命令选择一个数据库，序号从 0 开始到 -1
databases 4

# By default Redis shows an ASCII art logo only when started to log to the
# standard output and if the standard output is a TTY. Basically this means
# that normally a logo is displayed only in interactive sessions.
#
# However it is possible to force the pre-4.0 behavior and always show a
# ASCII art logo in startup logs by setting the following option to yes.
always-show-logo yes


################################ SNAPSHOTTING  ################################
# RDB 核心规则配置 save <指定时间间隔> <执行指定次数更新操作>，满足条件就将内存中的数据同步到硬盘中：官方出厂配置默认是 900 秒内有 1 个更改，
# 300 秒内有 10 个更改以及 60 秒内有 10000 个更改，则将内存中的数据快照写入磁盘，若不想用 RDB方案，可以把 save "" 的注释打开，下面三个注释
# save ""
save 900 1
save 300 10
save 60 10000

# 当 RDB 持久化出现错误后，是否依然进行继续进行工作，yes：不能进行工作，no：可以继续进行工作，
#     可以通过 info 中的 rdb_last_bgsave_status 了解 RDB 持久化是否有错误
stop-writes-on-bgsave-error yes

# 配置存储至本地数据库时是否压缩数据，默认为 yes：Redis 采用 LZF 压缩方式，但占用了一点 CPU 的时间，
#     若关闭该选项，但会导致数据库文件变的巨大，建议开启
rdbcompression yes

# 是否校验 rdb 文件：从 rdb 格式的第五个版本开始，在 rdb 文件的末尾会带上 CRC64 的校验和，这更有利于文件的容错性，
#     但是在保存 rdb 文件的时候，会有大概 10% 的性能损耗，所以如果你追求高性能，可以关闭该配置
rdbchecksum yes

# 指定本地数据库文件名，一般采用默认的 dump.rdb
dbfilename dump.rdb

# 数据目录：数据库的写入会在这个目录，rdb、aof 文件也会写在这个目录
dir ${REDIS_HOME}/data


################################# REPLICATION #################################

# Master-Replica replication. Use replicaof to make a Redis instance a copy of
# another Redis server. A few things to understand ASAP about Redis replication.
#
#   +------------------+      +---------------+
#   |      Master      | ---> |    Replica    |
#   | (receive writes) |      |  (exact copy) |
#   +------------------+      +---------------+
#
# 1) Redis replication is asynchronous, but you can configure a master to
#    stop accepting writes if it appears to be not connected with at least
#    a given number of replicas.
# 2) Redis replicas are able to perform a partial resynchronization with the
#    master if the replication link is lost for a relatively small amount of
#    time. You may want to configure the replication backlog size (see the next
#    sections of this file) with a sensible value depending on your needs.
# 3) Replication is automatic and does not need user intervention. After a
#    network partition replicas automatically try to reconnect to masters
#    and resynchronize with them.

# 复制选项，slave 复制对应的 master
# replicaof <masterip> <masterport>

# 如果 master 设置了 requirepass，那么 slave 要连上 master，需要有 master 的密码才行。
#     masterauth 就是用来配置 master 的密码，这样可以在连上 master 后进行认证
# masterauth <master-password>

# 当从库同主机失去连接或者复制正在进行，从机库有两种运行方式：
#     1) 如果 slave-serve-stale-data 设置为 yes (默认设置)，从库会继续响应客户端的请求
#     2) 如果 slave-serve-stale-data 设置为 no，INFO,replicaOF, AUTH, PING, SHUTDOWN, REPLCONF, 
#            ROLE, CONFIG,SUBSCRIBE, UNSUBSCRIBE, PSUBSCRIBE, PUNSUBSCRIBE, PUBLISH, PUBSUB, 
#            COMMAND, POST, HOST: and LATENCY 命令之外的任何请求都会返回一个错误 "SYNC with master in progress"
replica-serve-stale-data yes

# 作为从服务器，默认情况下是只读的（yes），可以修改成NO，用于写（不建议）
replica-read-only yes

# 是否使用 socket 方式复制数据：目前 redis 复制提供两种方式，disk 和 socket；如果新的 slave 连上来或者重连的 slave 无法部分同步，就会执行全量同步，master 会生成 rdb 文件
#     disk：master 创建一个新的进程把 rdb 文件保存到磁盘，再把磁盘上的 rdb 文件传递给 slave
#     socket ：master 创建一个新的进程，直接把 rdb 文件以 socket 的方式发给slave
#         disk 方式的时候，当一个 rdb 保存的过程中，多个 slave 都能共享这个 rdb 文件
#         socket的方式就的一个个 slave 顺序复制，在磁盘速度缓慢，网速快的情况下推荐用 socket 方式
repl-diskless-sync no

# diskless 复制的延迟时间，防止设置为 0，一旦复制开始，节点不会再接收新 slave 的复制请求直到下一个 rdb 传输所以最好等待一段时间，等更多的 slave 连上来
repl-diskless-sync-delay 5

# slave 根据指定的时间间隔向服务器发送 ping 请求：时间间隔可以通过 repl_ping_slave_period 来设置，默认10秒。
# repl-ping-replica-period 10

# 复制连接超时时间：master 和 slave 都有超时时间的设置：master 检测到 slave 上次发送的时间超过 repl-timeout，即认为 slave 离线，清除该 slave 信息
#     slave 检测到上次和 master 交互的时间超过 repl-timeout，则认为 master 离线；repl-timeout 需要 比repl-ping-slave-period 大
# repl-timeout 60

# 是否禁止复制 tcp 链接的 tcp nodelay参数：可传递 yes 或者 no（默认）：即使用 tcp nodelay，如果 master 设置了 yes 来禁止 tcp nodelay 设置，
# 在把数据复制给 slave 的时候，会减少包的数量和更小的网络带宽，但也带来数据延迟，默认推荐更小的延迟，在数据量传输很大的场景下，建议选择 yes
repl-disable-tcp-nodelay no

# 复制缓冲区大小，这是一个环形复制缓冲区，用来保存最新复制的命令：这样在 slave 离线的时候，不需要完全复制 master 的数据，
# 如果可以执行部分同步，只需要把缓冲区的部分数据复制给 slave，就能恢复正常复制状态，缓冲区的大小越大，slave 离线的时间可以更长，
# 复制缓冲区只有在有 slave 连接的时候才分配内存，没有 slave 的一段时间，内存会被释放出来，默认 1m
# repl-backlog-size 1mb

# master 没有 slave 一段时间会释放复制缓冲区的内存，repl-backlog-ttl 用来设置该时间长度，单位为秒
# repl-backlog-ttl 3600

# 当master 不可用，Sentinel 会根据 slave 的优先级选举一个 master：最低的优先级的 slave，当选 master 而配置成 0，永远不会被选举
replica-priority 100

# redis 提供了可以让 master 停止写入的方式，如果配置了 min-replicas-to-write，健康的 slave 的个数小于 N，mater 就禁止写入
# master 最少得有多少个健康的 slave 存活才能执行写命令，这个配置虽然不能保证 N 个 slave 都一定能接收到 master 的写操作，
# 但是能避免没有足够健康的 slave 的时候，master 不能写入来避免数据丢失，设置为 0 是关闭该功能
# min-replicas-to-write 3

# 延迟小于 min-replicas-max-lag 秒的 slave 才认为是健康的，设置 1 或另一个设置为 0 禁用这个特性
# min-replicas-max-lag 10

# Setting one or the other to 0 disables the feature.
#
# By default min-replicas-to-write is set to 0 (feature disabled) and
# min-replicas-max-lag is set to 10.

# A Redis master is able to list the address and port of the attached
# replicas in different ways. For example the "INFO replication" section
# offers this information, which is used, among other tools, by
# Redis Sentinel in order to discover replica instances.
# Another place where this info is available is in the output of the
# "ROLE" command of a master.
#
# The listed IP and address normally reported by a replica is obtained
# in the following way:
#
#   IP: The address is auto detected by checking the peer address
#   of the socket used by the replica to connect with the master.
#
#   Port: The port is communicated by the replica during the replication
#   handshake, and is normally the port that the replica is using to
#   listen for connections.
#
# However when port forwarding or Network Address Translation (NAT) is
# used, the replica may be actually reachable via different IP and port
# pairs. The following two options can be used by a replica in order to
# report to its master a specific set of IP and port, so that both INFO
# and ROLE will report those values.
#
# There is no need to use both the options if you need to override just
# the port or the IP address.
#
# replica-announce-ip 5.5.5.5
# replica-announce-port 1234


################################## SECURITY ###################################

# Requirepass 配置可以让用户使用 AUTH 命令来认证密码，才能使用其他命令，这让 redis 可以使用在不受信任的网络中，
#     为了保持向后的兼容性，可以注释该命令，因为大部分用户也不需要认证，使用 requirepass 的时候需要注意，
#     因为 redis 太快了，每秒可以认证 15w 次密码，简单的密码很容易被攻破，所以最好使用一个更复杂的密码
# requirepass foobared

# 把危险的命令给修改成其他名称：比如 CONFIG 命令可以重命名为一个很难被猜到的命令，这样用户不能使用，而内部工具还能接着使用
# rename-command CONFIG b840fc02d524045429941cc15f59e41cb7be6c52

# 设置成一个空的值，可以禁止一个命令
# rename-command CONFIG ""


################################### CLIENTS ####################################

# 设置能连上 redis 的最大客户端连接数量：默认 10000 个客户端连接，由于 redis 不区分连接是客户端连接还是内部打开文件或者和 slave 连接等，
# 所以 maxclients 最小建议设置到 32，如果超过了 maxclients，redis 会给新的连接发送 "max number of clients reached"，并关闭连接
# maxclients 10000


############################## MEMORY MANAGEMENT ################################

# redis 配置的最大内存容量：当内存满了，需要配合 maxmemory-policy 策略进行处理，注意 slave 的输出缓冲区是不计算在 maxmemory 内的
#     所以为了防止主机内存使用完，建议设置的 maxmemory 需要更小一些
# maxmemory <bytes>

# 内存容量超过 maxmemory 后的处理策略：
#     volatile-lru：   利用 LRU 算法移除设置过过期时间的 key
#     volatile-random：随机移除设置过过期时间的 key
#     volatile-ttl：   移除即将过期的 key，根据最近过期时间来删除（辅以 TTL）
#     allkeys-lru：    利用 LRU 算法移除任何 key
#     allkeys-random： 随机移除任何 key
#     noeviction：     不移除任何 key，只是返回一个写错误
# 如果 redis 没有合适的 key 驱逐，对于写命令，还是会返回错误，将不再接收写请求，只接收 get 请求。
#     写命令包括：set setnx setex append incr decr rpush lpush rpushx lpushx linsert lset rpoplpush sadd 
#                    sinter sinterstore sunion sunionstore sdiff sdiffstore zadd zincrby zunionstore 
#                    zinterstore hset hsetnx hmset hincrby incrby decrby getset mset msetnx exec sort
# maxmemory-policy noeviction

# lru 检测的样本数：使用 lru 或者 ttl 淘汰算法，从需要淘汰的列表中随机选择 sample 个 key，选出闲置时间最长的 key 移除
# maxmemory-samples 5

# 是否开启 salve 的最大内存
# replica-ignore-maxmemory yes


############################# LAZY FREEING ####################################

# 以非阻塞方式释放内存
lazyfree-lazy-eviction no
lazyfree-lazy-expire no
lazyfree-lazy-server-del no
replica-lazy-flush no


############################## APPEND ONLY MODE ###############################

# Redis 默认不开启：它的出现是为了弥补 RDB 的不足（数据的不一致性），所以它采用日志的形式来记录每个写操作，并追加到文件中，
# Redis 重启的会根据日志文件的内容将写指令从前到后执行一次以完成数据的恢复工作默认 redis 使用的是 rdb 方式持久化，
# 这种方式在许多应用中已经足够用了，但是 redis 如果中途宕机，会导致可能有几分钟的数据丢失，根据 save 来策略进行持久化，
# Append Only File 是另一种持久化方式，可以提供更好的持久化特性；Redis 会把每次写入的数据在接收后都写入 appendonly.aof 文件，
# 每次启动时 Redis 都会先把这个文件的数据读入内存里，先忽略 RDB 文件，若开启 rdb 则将 no 改为 yes
appendonly no

# 指定本地数据库文件名，默认值为 appendonly.aof
appendfilename "appendonly.aof"

# aof 持久化策略的配置：
#     no       ：不执行 fsync，由操作系统保证数据同步到磁盘，速度最快
#     always   ：表示每次写入都执行 fsync，以保证数据同步到磁盘
#     everysec ：表示每秒执行一次 fsync，可能会导致丢失这 1s 数据
# appendfsync always
appendfsync everysec
# appendfsync no

# 在 aof 重写或者写入 rdb 文件的时候，会执行大量 IO，此时对于 everysec 和 always 的 aof 模式来说，执行 fsync 会造成阻塞过长时间
# no-appendfsync-on-rewrite 字段设置为默认设置为 no,如果对延迟要求很高的应用，这个字段可以设置为 yes，否则还是设置为 no，这样对持久化特性来说这是更安全的选择
# 设置为 yes 表示 rewrite 期间对新写操作不 fsync，暂时存在内存中，等 rewrite 完成后再写入，默认为 no，建议 yes，Linux 的默认 fsync 策略是 30 秒，可能丢失 30 秒数据
no-appendfsync-on-rewrite no

# aof 自动重写配置：当目前 aof 文件大小超过上一次重写的 aof 文件大小的百分之多少进行重写，
# 即当 aof 文件增长到一定大小的时候 Redis 能够调用 bgrewriteaof 对日志文件进行重写。
# 当前 AOF 文件大小是上次日志重写得到 AOF 文件大小的二倍（设置为100）时，自动启动新的日志重写过程
auto-aof-rewrite-percentage 100


# 设置允许重写的最小 aof 文件大小，避免了达到约定百分比但尺寸仍然很小的情况还要重写
auto-aof-rewrite-min-size 64mb

# aof 文件可能在尾部是不完整的，当 redis 启动的时候，aof 文件的数据被载入内存，重启可能发生在 redis 所在的主机操作系统宕机后，
# 尤其在 ext4 文件系统没有加上 data=ordered 选项（redis宕机或者异常终止不会造成尾部不完整现象）出现这种现象，可以选择让 redis 退出，
# 或者导入尽可能多的数据，如果选择的是 yes，当截断的 aof 文件被导入的时候，会自动发布一个 log 给客户端然后 load，
# 如果是 no，用户必须手动 redis-check-aof 修复 AOF 文件才可
aof-load-truncated yes

# 加载 redis 时，可以识别 AOF 文件以 "redis" 开头，字符串并加载带前缀的 RDB 文件，然后继续加载 AOF 尾巴
aof-use-rdb-preamble yes


################################ LUA SCRIPTING  ###############################

# 如果达到最大时间限制（毫秒），redis 会记个 log，然后返回 error，当一个脚本超过了最大时限，只有 SCRIPT KILL 和 SHUTDOWN NOSAVE 可以用
#     第一个可以杀没有调 write 命令的东西，要是已经调用了 write，只能用第二个命令杀
lua-time-limit 5000


################################ REDIS CLUSTER  ###############################

# 集群开关，默认是不开启集群模式
# cluster-enabled yes

# 集群配置文件的名称，每个节点都有一个集群相关的配置文件，持久化保存集群的信息，这个文件并不需要手动配置，
#     这个配置文件有 Redis 生成并更新，每个 Redis 集群节点需要一个单独的配置文件，请确保与实例运行的系统中配置文件名称不冲突
# cluster-config-file nodes-6379.conf

# 节点互连超时的阀值，集群节点超时毫秒数
# cluster-node-timeout 15000

# 在进行故障转移的时候，全部 slave 都会请求申请为 master，但是有些 slave 可能与 master 断开连接一段时间了，导致数据过于陈旧，
# 这样的 slave 不应该被提升为 master，该参数就是用来判断 slave 节点与 master 断线的时间是否过长
# 比较 slave 断开连接的时间和(node-timeout * slave-validity-factor) + repl-ping-slave-period
#     如果为 30s, 并且 slave-validity-factor 为 10，假设默认的 repl-ping-slave-period 是 10s，即超过 310s slave 将不会尝试进行故障转移
# cluster-replica-validity-factor 10

# master 的 slave 数量大于该值，slave 才能迁移到其他孤立 master上，如这个参数若被设为 2，
#     那么只有当一个主节点拥有 2 个可工作的从节点时，它的一个从节点会尝试迁移
# cluster-migration-barrier 1

# 默认情况下，集群全部的 slot 有节点负责，集群状态才为 ok，才能提供服务：设置为 no，可以在 slot 没有全部分配的时候提供服务
# 不建议打开该配置，这样会造成分区的时候，小分区的 master 一直在接受写请求，而造成很长时间数据不一致
# cluster-require-full-coverage yes

# This option, when set to yes, prevents replicas from trying to failover its
# master during master failures. However the master can still perform a
# manual failover, if forced to do so.
#
# This is useful in different scenarios, especially in the case of multiple
# data center operations, where we want one side to never be promoted if not
# in the case of a total DC failure.
#
# cluster-replica-no-failover no


########################## CLUSTER DOCKER/NAT support  ########################

# 群集公告 IP
# * cluster-announce-ip

# 群集公告端口
# * cluster-announce-port

# 群集公告总线端口
# * cluster-announce-bus-port

# cluster-announce-ip 10.1.1.5
# cluster-announce-port 6379
# cluster-announce-bus-port 6380

################################## SLOW LOG ###################################

# 用来记录 redis 运行中执行比较慢的命令耗时，当命令的执行超过了指定时间，就记录在 slow log 中，slog log 保存在内存中，没有 IO 操作，
#     执行时间比 slowlog-log-slower-than 大的请求记录到 slowlog 里面，单位：微秒，负数时间会禁用慢查询日志，而 0 则会强制记录所有命令
slowlog-log-slower-than 10000

# 慢查询日志长度：当一个新的命令被写进日志的时候，最老的那个记录会被删掉，这个长度没有限制，只要有足够的内存就行，可通过 SLOWLOG RESET 来释放内存
slowlog-max-len 128


################################ LATENCY MONITOR ##############################

# 延迟监控功能是用来监控 redis 中执行比较缓慢的一些操作，用 LATENCY 打印 redis 实例在跑命令时的耗时图表，
#     只记录大于等于下边设置的值的操作，0 的话，就是关闭监视，默认延迟监控功能是关闭的，如果你需要打开，
#         也可以通过 CONFIG SET 命令动态设置
latency-monitor-threshold 0


############################# EVENT NOTIFICATION ##############################

# 键空间通知使得客户端可以通过订阅频道或模式，来接收那些以某种方式改动了 Redis 数据集的事件
#    因为开启键空间通知功能需要消耗一些 CPU，所以在默认配置下，该功能处于关闭状态
# notify-keyspace-events 的参数可以是以下字符的任意组合，它指定了服务器该发送哪些类型的通知：
#     K  键空间通知，所有通知以 __keyspace@__ 为前缀
#     E  键事件通知，所有通知以 __keyevent@__ 为前缀
#     g  DEL 、 EXPIRE 、 RENAME 等类型无关的通用命令的通知
#     $  字符串命令的通知
#     l  列表命令的通知
#     s  集合命令的通知
#     h  哈希命令的通知
#     z  有序集合命令的通知
#     x  过期事件：每当有过期键被删除时发送
#     e  驱逐(evict)事件：每当有键因为 maxmemory 政策而被删除时发送
#     A  参数 g$lshzxe 的别名
# 
#  notify-keyspace-events Ex

# 输入的参数中至少要有一个 K 或者 E，否则的话，不管其余的参数是什么，都不会有任何 通知被分发
notify-keyspace-events ""


############################### ADVANCED CONFIG ###############################

# 数据量小于等于 hash-max-ziplist-entries 的用 ziplist，大于 hash-max-ziplist-entries 用 hash
hash-max-ziplist-entries 512

# value 小于等于 hash-max-ziplist-value 的用 ziplist，大于 hash-max-ziplist-value 用 hash
hash-max-ziplist-value 64

# -5： 最大大小：  64 KB  <-- 不建议用于正常工作负载
# -4： 最大大小：  32 KB  <-- 不推荐
# -3： 最大大小：  16 KB  <-- 可能不推荐
# -2： 最大大小：  8 kB   <-- 良好
# -1： 最大大小：  4 kB   <-- 良好
list-max-ziplist-size -2

# 0： 禁用所有列表压缩
# 1： 深度 1 表示：在列表中的1个节点之后才开始压缩，从头部或尾部，所以：【head】 -> node -> node -> … -> node->【tail】
#        [头部]，[尾部]将始终未压缩；内部节点将压缩。
# 2：[头部] -> [下一步] -> 节点 -> 节点 -> … -> 节点 -> [上一步] -> [尾部]
#     2 是：不要压缩头部或头部 -> 下一个或尾部 -> 上一个或尾部，但是压缩它们之间的所有节点
# 3：[头部] -> [下一步] -> [下一步] -> 节点 -> 节点 -> … -> 节点 -> [上一步] -> [上一步] -> [尾部]
list-compress-depth 0

# 数据量小于等于 set-max-intset-entries 用 iniset，大于 set-max-intset-entries 用 set
set-max-intset-entries 512

# 数据量小于等于 zset-max-ziplist-entries 用 ziplist，大于 zset-max-ziplist-entries 用 zset
zset-max-ziplist-entries 128

# 大小小于等于 zset-max-ziplist-value 用 ziplist，大于 zset-max-ziplist-value 用 zset
zset-max-ziplist-value 64

# 大小小于等于 hll-sparse-max-bytes 使用稀疏数据结构（sparse），大于 hll-sparse-max-bytes 使用稠密的数据结构（dense）
# 一个比 16000 大的 value 是几乎没用的，建议的 value 大概为 3000，如果对 CPU 要求不高，对空间要求较高的，建议设置到 10000 左右
hll-sparse-max-bytes 3000

# 宏观节点的最大流/项目的大小：在流数据结构是一个基数树节点编码在这项大的多，利用这个配置它是如何可能#大节点配置是单字节和最大项目数，
#    这可能包含了在切换到新节点的时候 appending 新的流条目，如果任何以下设置来设置 ignored 极限是零，
#        例如，操作系统，它有可能只是一集通过设置限制最大#纪录到最大字节0和最大输入到所需的值
stream-node-max-bytes 4096
stream-node-max-entries 100

# Redis 将在每 100 毫秒时使用 1 毫秒的 CPU 时间来对 redis 的 hash 表进行重新 hash，可以降低内存的使用，当你的使用场景中，
#     有非常严格的实时性需要，不能够接受 Redis 时不时的对请求有2毫秒的延迟的话，把这项配置为 no，
#     如果没有这么严格的实时性要求，可以设置为 yes，以便能够尽可能快的释放内存
activerehashing yes

# 对客户端输出缓冲进行限制可以强迫那些不从服务器读取数据的客户端断开连接，用来强制关闭传输缓慢的客户端：
#     对于 normal client，第一个 0 表示取消 hard limit，第二个 0 和第三个 0 表示取消 soft limit，normal client 默认取消限制，
#          因为如果没有寻问，他们是不会接收数据的
client-output-buffer-limit normal 0 0 0

# 
#对于 slave client 和 MONITER client，如果 client-output-buffer 一旦超过 256mb，又或者超过 64mb 持续 60秒，那么服务器就会立即断开客户端连接
client-output-buffer-limit replica 256mb 64mb 60

# 对于 pubsub client，如果 client-output-buffer 一旦超过 32mb，又或者超过 8mb 持续 60 秒，那么服务器就会立即断开客户端连接
client-output-buffer-limit pubsub 32mb 8mb 60

# 这是客户端查询的缓存极限值大小
# client-query-buffer-limit 1gb

# 在 redis 协议中，批量请求，即表示单个字符串，通常限制为 512 MB，但是您可以更改此限制
# proto-max-bulk-len 512mb

# redis 执行任务的频率为 1s 除以 hz
hz 10

# 当启用动态赫兹时，实际配置的赫兹将用作作为基线，但实际配置的赫兹值的倍数在连接更多客户端后根据需要使用
#     这样一个闲置的实例将占用很少的 CPU 时间，而繁忙的实例将反应更灵敏
dynamic-hz yes

# 在 aof 重写的时候，如果打开了 aof-rewrite-incremental-fsync 开关，系统会每 32MB 执行一次 fsync
#     这对于把文件写入磁盘是有帮助的，可以避免过大的延迟峰值
aof-rewrite-incremental-fsync yes

# 在 rdb 保存的时候，如果打开了 rdb-save-incremental-fsync 开关，系统会每 32MB 执行一次 fsync，
#     对于把文件写入磁盘是有帮助的，可以避免过大的延迟峰值
rdb-save-incremental-fsync yes

# Redis LFU eviction (see maxmemory setting) can be tuned. However it is a good
# idea to start with the default settings and only change them after investigating
# how to improve the performances and how the keys LFU change over time, which
# is possible to inspect via the OBJECT FREQ command.
#
# There are two tunable parameters in the Redis LFU implementation: the
# counter logarithm factor and the counter decay time. It is important to
# understand what the two parameters mean before changing them.
#
# The LFU counter is just 8 bits per key, it's maximum value is 255, so Redis
# uses a probabilistic increment with logarithmic behavior. Given the value
# of the old counter, when a key is accessed, the counter is incremented in
# this way:
#
# 1. A random number R between 0 and 1 is extracted.
# 2. A probability P is calculated as 1/(old_value*lfu_log_factor+1).
# 3. The counter is incremented only if R < P.
#
# The default lfu-log-factor is 10. This is a table of how the frequency
# counter changes with a different number of accesses with different
# logarithmic factors:
#
# +--------+------------+------------+------------+------------+------------+
# | factor | 100 hits   | 1000 hits  | 100K hits  | 1M hits    | 10M hits   |
# +--------+------------+------------+------------+------------+------------+
# | 0      | 104        | 255        | 255        | 255        | 255        |
# +--------+------------+------------+------------+------------+------------+
# | 1      | 18         | 49         | 255        | 255        | 255        |
# +--------+------------+------------+------------+------------+------------+
# | 10     | 10         | 18         | 142        | 255        | 255        |
# +--------+------------+------------+------------+------------+------------+
# | 100    | 8          | 11         | 49         | 143        | 255        |
# +--------+------------+------------+------------+------------+------------+
#
# NOTE: The above table was obtained by running the following commands:
#
#   redis-benchmark -n 1000000 incr foo
#   redis-cli object freq foo
#
# NOTE 2: The counter initial value is 5 in order to give new objects a chance
# to accumulate hits.
#
# The counter decay time is the time, in minutes, that must elapse in order
# for the key counter to be divided by two (or decremented if it has a value
# less <= 10).
#
# The default value for the lfu-decay-time is 1. A Special value of 0 means to
# decay the counter every time it happens to be scanned.
#
# lfu-log-factor 10
# lfu-decay-time 1


########################### ACTIVE DEFRAGMENTATION #######################

# 已启用活动碎片整理
# activedefrag yes

# 启动活动碎片整理的最小碎片浪费量
# active-defrag-ignore-bytes 100mb

# 启动活动碎片整理的最小碎片百分比
# active-defrag-threshold-lower 10

# 使用最大努力的最大碎片百分比
# active-defrag-threshold-upper 100

# 以 CPU 百分比表示的碎片整理的最小工作量
# active-defrag-cycle-min 5

# 在 CPU 的百分比最大的努力和碎片整理
# active-defrag-cycle-max 75

# 将从中处理的 set/hash/zset/list 字段的最大数目：主词典扫描
# active-defrag-max-scan-fields 1000

# It is possible to pin different threads and processes of Redis to specific
# CPUs in your system, in order to maximize the performances of the server.
# This is useful both in order to pin different Redis threads in different
# CPUs, but also in order to make sure that multiple Redis instances running
# in the same host will be pinned to different CPUs.
#
# Normally you can do this using the "taskset" command, however it is also
# possible to this via Redis configuration directly, both in Linux and FreeBSD.
#
# You can pin the server/IO threads, bio threads, aof rewrite child process, and
# the bgsave child process. The syntax to specify the cpu list is the same as
# the taskset command:
#
# Set redis server/io threads to cpu affinity 0,2,4,6:
# server_cpulist 0-7:2
#
# Set bio threads to cpu affinity 1,3:
# bio_cpulist 1,3
#
# Set aof rewrite child process to cpu affinity 8,9,10,11:
# aof_rewrite_cpulist 8-11
#
# Set bgsave child process to cpu affinity 1,10,11
# bgsave_cpulist 1,10-11

# In some cases redis will emit warnings and even refuse to start if it detects
# that the system is in bad state, it is possible to suppress these warnings
# by setting the following config which takes a space delimited list of warnings
# to suppress
#
# ignore-warnings ARM64-COW-BUG
